Configurar o ambiente no Linux

1.	Atualizar o sistema

sudo apt update && sudo apt upgrade

2.	Instalar o gerenciador de versões (Pyenv)
2.1.	Atualizar pacotes

sudo apt-get update

2.2.	 Instalar pacotes básicos

sudo apt-get install -y liblzma-dev build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm gettext libncurses5-dev tk-dev tcl-dev blt-dev libgdbm-dev git python-dev python3-dev aria2

curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash


Depois desse comando :   NOVA EDIÇÃO DOS ARQUIVOS 

"""
WARNING: seems you still have not added 'pyenv' to the load path.

# Load pyenv automatically by appending
# the following to
~/.bash_profile if it exists, otherwise ~/.profile (for login shells)
and ~/.bashrc (for interactive shells) :

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# Restart your shell for the changes to take effect.

# Load pyenv-virtualenv automatically by adding
# the following to ~/.bashrc:

eval "$(pyenv virtualenv-init -)"
"""



2.3.	Editar o arquivo .bashrc (ir a pasta ‘home’ ou ‘pasta pessoal’ e procurar o arquivo)

vim ~/.bashrc

2.4.	Colar o código no fim do arquivo .bashrc - NOVO ('https://github.com/pyenv/pyenv'): no fim das contas utilizei os comandos velhos adicionando os novos da maneira como estão no site do github acima. 
Tanto o export quando o echo no arquivo 'profile' parecem ter ajudado aos comandos do pyenv no prompt. agora consigo definir um tipo python como 'global' e de fato o 'python3 --version' está editado. 
Pela primeira vez então, estou usando o ambiente virtual local puro. Sem a ativação do ambiente não há 'jupyter notebook'.

""" # VELHO

For Bash:

If your ~/.profile sources ~/.bashrc (Debian, Ubuntu, Mint):

# the sed invocation inserts the lines at the start of the file
# after any initial comment lines
sed -Ei -e '/^([^#]|$)/ {a \
export PYENV_ROOT="$HOME/.pyenv"
a \
export PATH="$PYENV_ROOT/bin:$PATH"
a \
' -e ':a' -e '$!{n;ba};}' ~/.profile
echo 'eval "$(pyenv init --path)"' >>~/.profile

echo 'eval "$(pyenv init -)"' >> ~/.bashrc
"""

obs.: $ pyenv    >> the install, version and versions are the ones we use most of the time.



"""" # VELHO 2 para o 'vim ~/.bashrc'
export PYTHON_BUILD_ARIA2_OPTS="-x 10 -k 1M"
export PATH="~/.pyenv/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
""""


2.5.	Fechar terminais abertos e executar o codigo de update abaixo

sudo apt update

3.	Instalar o gerenciador de pacotes pip

sudo apt install python3-pip

4.	Instalando o Git

sudo apt update
sudo apt install git

4.1.	Configurando o Git

git config --global user.name “seu_usuário_no_git”
git config –-global user.email “seu_email_no_git”

4.2.	Clocando repositórios

git clone “site do clone”

5.	Criando ambiente virtual / """https://www.youtube.com/watch?v=KL7HRhE9g7A"""

pyenv install 3.8.10 # versão do python de sua escolha 

$ python   >>> quit()

pyenv global 3.8.10  # after that nem

$ python   >>> quit()


pyenv virtualenv 3.8.10(versão do python de sua escolha) datascience (nome_do_diretório)

5.1.	Ativando virtualenv

pyenv activate datascience 

6.	Instalando dependências do projeto

pip install cytron
pip install -r requirement.txt 

7.	Instalando IDE’s

pip install jupyter notebook
pip install jupyter_contrib_nbextensions
jupyter contrib nbextensions install --user 



#Comandos básicos no Linux
cd - navegação entre páginas (cd nome_da_pasta)
pwd - exibe o diretório da pasta atual (pwd)
ls -exibe os arquivos da pasta do diretório atual (ls)
cp - copia arquivos (cp diretorio/do/arquivo.txt /pasta/para/onde/quer/copiar)
mv - move arquivos (mv diretorio/do/arquivo.txt /pasta/para/onde/quer/mover)
rm - remove arquivos (rm nome_do_arquivo)
rmdir - remove diretórios vazios (rmdir nome_do_diretorio)
rm-r - remove diretório (rm-r nome_do_diretorio)
mkdir - cria diretório (mkdir nome_do_diretorio)
car - o que há dentro de cada arquivo 
file - tipo de arquivo dentro de arquivo que foi digitado 
ctrl+l - limpa o terminal


8. Remover todas as bibliotecas do pip, para reinstalar do zero

pip freeze | xargs pip uninstall -y







